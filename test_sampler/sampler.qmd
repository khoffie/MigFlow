---
title: Test Samplers
authors:
  - name: Konstantin Hoffie
    affiliation: East-German
    roles: writing
    corresponding: true
engine: julia
julia:
  exeflags: ["--project=/home/konstantin/code"]
  env: ["JULIA_NUM_THREADS=5"]
---

# Evaluating Sampler with fundamentals model
This shows the environment 
```{julia}
#| label: show-env
import Pkg
Pkg.status()

```

```{julia}
#| label: load-env
# Pkg.status()
using Revise, RCall, Turing, Pigeons, InferenceReport
## better load only libraries really needed, and load them here
include("../src/datafitting.jl")
include("../src/models.jl")
include("../src/postprocess.jl")
include("../src/fitandwrite.jl")
include("../src/temperedmodel.jl")
include("../src/utils.jl")

```

```{julia}
#| label: define-functions
n_samples = 100

function testsampler(path, alldata, sampler, n_samples, thinning, name, fit = "auto")
    f = joinpath(path, "chains/$(name)") 

    if fit == "yes" || (fit == "auto" && !isfile(f))
        println("Fitting model $name")
        chn = fitmodel(path, alldata, sampler, n_samples, thinning, name)
    elseif fit == "no" || (fit == "auto" && isfile(f))   
        println("Model $name loaded from disk")
        chn = Serialization.deserialize(f)
    else
        error("Invalid value for fit: $fit. Use \"yes\", \"no\", or \"auto\".")    
    end
    
    return chn
end

# test = deserialize("./test_sampler/chains/mh-prior")
# gravity(test)

```


```{julia}
#| label: load-data

germd = load_data("../data/", false)    
outpaths = createpaths("./results/testing", "germ", 2017, "30-50")    
nchains = 4

```

First we test `Metropolis Hastings` with a multivariate normal
proposal distribution. Specifically we use independent normals with
mean 0 and $0.1^2$ variance.

```{julia}
#| label: mh-normal
chn_mhn = testsampler(".", germd, MH(.1^2*I(nrow(germd.vals))),
                      n_samples, 5, "mh-normal", "yes")
gravity(chn_mhn)

```

```{julia}
#| label: mh-prior
chn_mhp = testsampler(".", germd, MH(), n_samples, 5, "mh-prior", "yes")
gravity(chn_mhp)

```

Next we test the slice sampler. Previously slice needed about 5x as
long to generate the same amount of samples. Thus, to compare it
fairly to MH, we only generate 100 samples

```{julia}
#| label: slice-2.0
sam = externalsampler(SliceSampling.HitAndRun(SliceSteppingOut(2.)))
chn_slice20 = testsampler(".", germd, sam, n_samples, 1, "slice-2.0", "yes")
gravity(chn_slice20)

```

```{julia}
#| label: slice-20
sam = externalsampler(SliceSampling.HitAndRun(SliceSteppingOut(.2)))
chn_slice02 = testsampler(".", germd, sam, n_samples, 5, "slice-0.2", "yes")
gravity(chn_slice02, 50, 50)
chn_slice02

i = 4
start = 20
plot(chn_slice02[start : end, :ktopop, i],
     chn_slice02[start : end, :a, i], seriestype = :scatter)

```

Thus, the resulting best LPs are

```{julia}
#| label: maxlps

samplers = ["MH-Normal", "MH-Prior", "Slice-2.0", "Slice-0.2"]
maxlps = [maxlp(chn_mhn), maxlp(chn_mhp),
          maxlp(chn_slice20), maxlp(chn_slice02)]
DataFrame(samplers = samplers, maxLPs = maxlps)

```

```{julia}
#| label: pigeon
#| eval: false

pt = @time(pigeons(target = TuringLogPotential(germd.model),
                   multithreaded = true, n_rounds = 5, n_chains = 4,
                   checkpoint = true,
                   record = [traces],
                   variational = GaussianReference(first_tuning_round = 1),
                   n_chains_variational = 2))

samples = Chains(pt)
StatsPlots.plot(samples)
plot(samples[:, :log_density, :])
report(pt)

```

```{julia}
#| label: tempering

germd = load_data("../data/", false)
outpaths = createpaths("./results/tempering", "germ", 2017, "30-50")    

sampler = SliceSampling.HitAndRun(SliceSteppingOut(0.2))
sampler = MH(.1^2*I(nrow(germd.vals)))
chn_tmp = runtempering(germd, sampler, germd.vals.params, germd.vals.inits;
                        outpaths = outpaths, thinning = 1,
                        start_temp = 1000.0,
                        last_temp = 800.0, decay = .1, n_samples = 100,
                        final_samples = 100, plt_type = "gravity")



germd.flows
gravity(chn_temp[end].chain, 250, 800)
savefig("~/Desktop/temp_800rows")


chn_temp[1][1]
gravity(chn_temp[10].chain, 50, 50)

plt = gravity(chn_temp[10].chain, 50, 50, "jo")

plot(plt, plot_title = "sadsd")



```
