---
author: Konstantin Hoffie, Daniel Lakeland
engine: julia
format: 
  pdf:
    header-includes:
    - \providecommand{\red}[1]{\textcolor{red}{\textbf{#1}}}
julia:
    exeflags: ["--project=@."]
    env: ["JULIA_NUM_THREADS=6"]
---

# Some first analyses

```{julia}
#| label: packages-scripts
using CSV, DataFrames, Turing, StatsBase, Random, Plots, StatsPlots
using ApproxFun, CategoricalArrays, NamedArrays, LaTeXStrings, Loess
using ADTypes, KernelDensity, Serialization, DynamicPPL, LinearAlgebra
using BenchmarkTools, IterTools, StatProfilerHTML, ReverseDiff
using Suppressor, Distributions, Revise, GeoStats, GeoIO, CairoMakie

include("../src/utils.jl")
include("../src/estimation.jl")
include("../src/loadgermdata.jl")
include("../src/diag.jl")
include("../src/diagplots.jl")
include("../src/diagchain.jl")
include("../src/diagrbf.jl")
include("../src/norm.jl")
include("../src/rbf.jl")
include("../src/analysis.jl")
include("../src/model_helpers.jl")

```

```{julia}
#| label: gendata

function gendata(ages) 
    years = Symbol.("y" .* string.(vcat(2000:2002, 2004:2017)))
    files = readdir("./output"; join = true)

    data = (; (
        age => (; zip(years, reorder(deserialize(file)))...)
        for (age, file) in zip(ages, files)
            )...)
    return data
end
ages = Symbol.("age" .* ["18to25", "25to30", "30to50", "50to65", "above65", "below18"]);
data = gendata(ages);
ages = keys(data)

shp = DataFrame(GeoIO.load("../data/clean/shapes/districts_ext.shp"))
## we join geo estimates based on coords and there are numerical inaccuracies
shp.xcoord = round.(scale_to_unit(shp.x), digits = 4)
shp.ycoord = round.(scale_to_unit(shp.y), digits = 4)
shp = shp[!, [:AGS, :xcoord, :ycoord, :geometry]];

plotyears = [:y2000, :y2001, :y2002, :y2015, :y2016, :y2017]

```

```{julia}

df = @suppress loopstruct(data, extract_params);
df = reduce(vcat, df);

```

```{julia}
#| label: fig-alpha
#| fig-cap: "Alpha supposedly estimates the probability to move into a district with median population 100km away, when the density transition function returns 1  and locational desir of origin equals locational desir of destination ."
coefs = [:α_raw, :γ_raw, :ϕ_raw, :deviance]
plot([plotcoef(df, c, :age) for c in coefs]...)

```

@fig-alpha is interesting, because it suggests, that age group 30-50
gets more mobile, even more mobile than 18 to 25. This is surprising.
However, $\alpha$ does not simply estimate the probability to move,
rather it corresponds to the probability to move into a certain
district, such that all other predictors are 1. This is how an
intercept in a multiplicative model works. In a linear model the
intercept corresponds to all other predictors being zero. With the
current model that means that $\alpha$ corresponds to the probability
to move into district with a population of 153000 \red{This is the
median population for 2017, between years the actual median pop can be
lower by about 5000 (quite surprising). I will use the actual median
pop for the next fitting.} Accordingly, the ratio between origin and
destination desirability is one and the density transition function is
also 1. To which precise values of origin and destination density this
corresponds is not clear. The density transition function will be one
for infinitely many pairs of origin and destination density
concentrated in some subset that varies between age groups. Thus
$\alpha$ does not necessarily tell us how mobile people are, rather it
tells us how likely they are to move to a destinations with the just
mentioned properties. The actual predicted mobility equals the ratio
of predicted flows to population and this equals exactly the observed
probability to move, defined as the ratio of observed flows over
population. Surprisingly, the predicted total flows correspond almost
perfectly to the actual observed flows. The observed probability to
move, the predicted probability to move and $\alpha$ are plotted in
@fig-pleave

```{julia}

#| label: fig-pleave
#| fig-cap: "From left to right: Observed probability to move; predicted probability to move and alpha"
probs = DataFrame(age = String[], year = Int64[], A = Int64[], T = Float64[], F = Int64[]);
function pleave(r)
    df = DataFrame(; r.mdl.mdl.args.A, r.mdl.mdl.args.from)
    A = sum(unique(df, :from).A)
    T = sum(r.prd)
    F = Int(sum(r.mdl.mdl.args.Y))
    return [r.mdl.data.age, r.mdl.data.year, A, T, F]
end

loopstruct(data, x -> push!(probs, pleave(x)));
probs.pleave = probs.F ./ probs.A .* 100;
probs.pleavepred = probs.T ./ probs.A .* 100;
    
p1 = plotcoef(probs, :pleave, :age)
p2 = plotcoef(probs, :pleavepred, :age)
p3 = plotcoef(df, :α_raw, :age)
plot(p1, p2, p3, layout = (1, 3))


```


```{julia}

plotyears = [:y2000, :y2001, :y2002, :y2015, :y2016, :y2017]

plts = Plots.Plot[]
Threads.@threads for i in eachindex(ages)
    a = ages[i]
    geos = loopstruct(data, x -> plotgeorbf(x, (-.3, .3) ), [a], plotyears)
    p = Plots.plot([g[2] for g in geos]..., size = (1200, 900), plot_title = "$a")
    push!(plts, p)
end
foreach(display, plts)

```


```{julia}

plts = Vector{Any}(undef, length(ages))
Threads.@threads for i in eachindex(ages)
    a = ages[i]
    dens = loopstruct(data, x -> plotdensrbf(x, (-1, 1)), [a], plotyears)
    p = plot([d[2] for d in dens]..., size = (1200, 900), plot_title = "$a")
    plts[i] = p
end
foreach(display, plts)

```

